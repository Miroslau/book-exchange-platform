generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  books     Book[]
  comments  Comment[]
}

model Book {
  id          Int         @id @default(autoincrement())
  title       String
  author      String
  description String?
  categories  String[]
  status      BookStatus  @default(OFFERED)
  ownerId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      BookImage[]
  comments    Comment[]
}

model BookImage {
  id     String @id @default(cuid())
  url    String
  hash   String
  bookId Int
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookId, hash]) // Предотвращение дублирования одинаковых изображений для одной книги
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  bookId    Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum BookStatus {
  OFFERED
  SOLD
  RESERVED
  EXCHANGED
}
